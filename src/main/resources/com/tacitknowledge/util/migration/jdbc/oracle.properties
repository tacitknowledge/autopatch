supportsMultipleStatements=false

patches.create=CREATE TABLE tk_patches (\
	   system_name VARCHAR2(30) NOT NULL\
     , patch_level NUMBER NOT NULL\
     , patch_date DATE DEFAULT SYSDATE NOT NULL\
     , patch_in_progress CHAR(1) DEFAULT 'F' NOT NULL\
     , CONSTRAINT tk_patches_pk PRIMARY KEY (system_name, patch_level) )

# Validates that a record exists for a given system
level.create=INSERT INTO tk_patches (system_name, patch_level) VALUES ( ?, 0 )
level.count=SELECT COUNT(*) FROM tk_patches WHERE system_name = ?
level.table.exists=SELECT patch_level FROM tk_patches WHERE system_name = ?
level.read=SELECT MAX(patch_level) FROM tk_patches WHERE system_name = ?
level.rollback=DELETE FROM tk_patches WHERE patch_level = ? and system_name = ?
level.update=INSERT INTO tk_patches (patch_level, system_name, patch_date) VALUES ( ?, ?, SYSDATE)
level.exists=SELECT patch_level FROM tk_patches WHERE system_name=? and patch_level=?

patches.all=SELECT patch_level FROM tk_patches WHERE system_name = ?

# Since most DBs do not have a boolean type, return 0 or 1 row to determine if
# the system is currently locked.
lock.read=SELECT patch_in_progress FROM tk_patches WHERE system_name = ? AND ( patch_in_progress <> 'F' OR patch_level in ( SELECT MAX(patch_level) FROM tk_patches WHERE system_name = ? ))
lock.obtain=UPDATE tk_patches SET patch_in_progress = 'T' WHERE system_name = ? AND patch_in_progress = 'F' AND patch_level in ( SELECT MAX(patch_level) FROM tk_patches WHERE system_name = ? )
lock.release=UPDATE tk_patches SET patch_in_progress = 'F' WHERE system_name = ? AND patch_in_progress <> 'F'
