supportsMultipleStatements=false

patches.create=CREATE TABLE patches (\
                system_name VARCHAR(30) NOT NULL PRIMARY KEY,\
                patch_level INT NOT NULL,\
                patch_date DATETIME DEFAULT getdate() NOT NULL,\
                patch_in_progress CHAR(1) DEFAULT 'F' NOT NULL,\
                primary key clustered (system_name, patch_level))
                
# Validates that a record exists for a given system
level.create=INSERT INTO patches (system_name, patch_level) VALUES ( ?, 0 )
level.count=SELECT COUNT(*) FROM patches WHERE system_name = ?
level.table.exists=SELECT patch_level FROM patches WHERE system_name = ?
level.read=SELECT MAX(patch_level) FROM patches WHERE system_name = ?
level.rollback=DELETE FROM patches WHERE patch_level = ? and system_name = ?
level.update=INSERT INTO patches (patch_level, system_name, patch_date) VALUES ( ?, ?, getdate())
level.exists=SELECT patch_level FROM patches WHERE system_name=? and patch_level=?

patches.all=SELECT patch_level FROM patches WHERE system_name = ?

# Since most DBs do not have a boolean type, return 0 or 1 row to determine if
# the system is currently locked.
lock.read=SELECT patch_in_progress FROM patches WHERE system_name = ? AND ( patch_in_progress <> 'F' OR patch_level in ( SELECT MAX(patch_level) FROM patches WHERE system_name = ? ))
lock.obtain=UPDATE patches SET patch_in_progress = 'T' WHERE system_name = ? AND patch_in_progress = 'F' AND patch_level in ( SELECT MAX(patch_level) FROM patches WHERE system_name = ? )
lock.release=UPDATE patches SET patch_in_progress = 'F' WHERE system_name = ? AND patch_in_progress <> 'F'
